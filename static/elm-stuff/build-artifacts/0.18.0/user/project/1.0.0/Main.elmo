var _user$project$Main$viewDownload = function (exp) {
	return A2(
		_evancz$elm_sortable_table$Table$HtmlDetails,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$form,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$action('/large.csv'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$method('post'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('hidden'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('folder_name'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(exp.name),
									_1: {ctor: '[]'}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('hidden'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('user_length'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(
											_elm_lang$core$Basics$toString(exp.userlength)),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('hidden'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$name('min_sequence'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(
												_elm_lang$core$Basics$toString(exp.minseq)),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('hidden'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$name('max_sequence'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(
													_elm_lang$core$Basics$toString(exp.maxseq)),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('submit'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Download csv'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$downloadColumn = _evancz$elm_sortable_table$Table$veryCustomColumn(
	{name: '', viewData: _user$project$Main$viewDownload, sorter: _evancz$elm_sortable_table$Table$unsortable});
var _user$project$Main$getExpLength = F2(
	function (fname, d) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'0',
			A2(_elm_lang$core$Dict$get, fname, d));
	});
var _user$project$Main$zipExperimentLengths = F2(
	function (userdefs, exp) {
		var lenInSecs = A2(_user$project$Main$getExpLength, exp.name, userdefs);
		return _elm_lang$core$Native_Utils.update(
			exp,
			{userlength: lenInSecs});
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$negate = F3(
	function (chosen, index, element) {
		return _elm_lang$core$Native_Utils.eq(chosen, index) ? (!element) : element;
	});
var _user$project$Main$negateArray = F2(
	function (index, arr) {
		return A2(
			_elm_lang$core$Array$indexedMap,
			_user$project$Main$negate(index),
			arr);
	});
var _user$project$Main$Experiment = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, excitation: b, damage: c, minseq: d, maxseq: e, range: f, userlength: g};
	});
var _user$project$Main$decodeExps = A8(
	_elm_lang$core$Json_Decode$map7,
	_user$project$Main$Experiment,
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'excitation', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'damage', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'minseq', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'maxseq', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'range', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'userlength', _elm_lang$core$Json_Decode$string));
var _user$project$Main$decodeListExperiments = _elm_lang$core$Json_Decode$list(_user$project$Main$decodeExps);
var _user$project$Main$FileLength = F2(
	function (a, b) {
		return {file: a, len: b};
	});
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {experimentlist: a, tableState: b, query: c, downloadParams: d};
	});
var _user$project$Main$SelectSubrange = function (a) {
	return {ctor: 'SelectSubrange', _0: a};
};
var _user$project$Main$applyFilelen = F2(
	function (filename, desiredlen) {
		return _user$project$Main$SelectSubrange(
			A2(_user$project$Main$FileLength, filename, desiredlen));
	});
var _user$project$Main$viewInput = function (exp) {
	return A2(
		_evancz$elm_sortable_table$Table$HtmlDetails,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('number'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$min('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$max(
								_elm_lang$core$Basics$toString(exp.range)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(
									_user$project$Main$applyFilelen(exp.name)),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$inputLength = _evancz$elm_sortable_table$Table$veryCustomColumn(
	{name: '', viewData: _user$project$Main$viewInput, sorter: _evancz$elm_sortable_table$Table$unsortable});
var _user$project$Main$SetTableState = function (a) {
	return {ctor: 'SetTableState', _0: a};
};
var _user$project$Main$config = _evancz$elm_sortable_table$Table$config(
	{
		toId: function (_) {
			return _.name;
		},
		toMsg: _user$project$Main$SetTableState,
		columns: {
			ctor: '::',
			_0: A2(
				_evancz$elm_sortable_table$Table$stringColumn,
				'Name',
				function (_) {
					return _.name;
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$elm_sortable_table$Table$intColumn,
					'Length (s)',
					function (_) {
						return _.range;
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$elm_sortable_table$Table$stringColumn,
						'Damage',
						function (_) {
							return _.damage;
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$elm_sortable_table$Table$stringColumn,
							'Excitation',
							function (_) {
								return _.excitation;
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Main$inputLength,
							_1: {
								ctor: '::',
								_0: _user$project$Main$downloadColumn,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$SetQuery = function (a) {
	return {ctor: 'SetQuery', _0: a};
};
var _user$project$Main$view = function (_p0) {
	var _p1 = _p0;
	var withlengths = A2(
		_elm_lang$core$List$map,
		_user$project$Main$zipExperimentLengths(_p1.downloadParams),
		_p1.experimentlist);
	var lowerQuery = _elm_lang$core$String$toLower(_p1.query);
	var acceptableExperiments = A2(
		_elm_lang$core$List$filter,
		function (_p2) {
			return A2(
				_elm_lang$core$String$contains,
				lowerQuery,
				_elm_lang$core$String$toLower(
					function (_) {
						return _.name;
					}(_p2)));
		},
		withlengths);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'font-family', _1: 'Arial'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Experiments'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Search by Name'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$SetQuery),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A3(_evancz$elm_sortable_table$Table$view, _user$project$Main$config, _p1.tableState, acceptableExperiments),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$FetchList = function (a) {
	return {ctor: 'FetchList', _0: a};
};
var _user$project$Main$fetchExperiments = function () {
	var url = 'http://127.0.0.1:5000/experiments';
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$FetchList,
		A2(_elm_lang$http$Http$get, url, _user$project$Main$decodeListExperiments));
}();
var _user$project$Main$init = function () {
	var model = {
		experimentlist: {ctor: '[]'},
		tableState: _evancz$elm_sortable_table$Table$initialSort('name'),
		query: '',
		downloadParams: _elm_lang$core$Dict$empty
	};
	return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$fetchExperiments};
}();
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'Experiments':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$fetchExperiments};
			case 'FetchList':
				if (_p3._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{experimentlist: _p3._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SetQuery':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{query: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetTableState':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{tableState: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p4 = _p3._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							downloadParams: A3(_elm_lang$core$Dict$insert, _p4.file, _p4.len, model.downloadParams)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
var _user$project$Main$Experiments = {ctor: 'Experiments'};
